package com.aladin.dao;

public class MemberDAO {
	 // 생성자
    public MemberDAO() {
    }

    // 싱글톤 패턴 적용: 하나의 인스턴스만 생성
    private static MemberDAO instance = new MemberDAO();

    public static MemberDAO getInstance() {
        return instance;
    }

    /**
     * 커넥션 풀을 통해 DB 연결 객체 가져오기
     */
    public Connection getConnection() throws Exception {
        Context initContext = new InitialContext();
        Context envContext = (Context) initContext.lookup("java:/comp/env");
        DataSource ds = (DataSource) envContext.lookup("jdbc/estoreDB");
        Connection conn = ds.getConnection();
        return conn;
    }

    /**
     * 로그인 확인 메서드
     * @param userid 입력한 아이디
     * @param pwd 입력한 비밀번호
     * @return 1: 로그인 성공, 0: 비밀번호 틀림, -1: 아이디 없음
     */
    public int userCheck(String userid, String pwd) {
        int result = -1;
        String sql = "select pwd from member where userid=?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, userid);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                if (rs.getString("pwd") != null && rs.getString("pwd").equals(pwd)) {
                    result = 1; // 로그인 성공
                } else {
                    result = 0; // 비밀번호 틀림
                }
            } else {
                result = -1; // 아이디 없음
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return result;
    }

    /**
     * 아이디로 회원 정보 가져오기
     */
    public MemberVO getMember(String userid) {
        MemberVO mVo = null;
        String sql = "select * from member where userid=?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, userid);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                mVo = new MemberVO();
                mVo.setUsername(rs.getString("username"));
                mVo.setUserid(rs.getString("userid"));
                mVo.setPwd(rs.getString("pwd"));
                mVo.setEmail(rs.getString("email"));
                mVo.setPhone(rs.getString("phone"));
                mVo.setAdmin(rs.getInt("admin"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return mVo;
    }
}
