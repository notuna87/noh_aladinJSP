package com.aladin.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.aladin.dao.BoardDAO;
import com.aladin.dao.MemberDAO;
import com.aladin.dto.BoardVO;
import com.aladin.dto.MemberVO;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

@WebServlet("/boarderupdate.do")
public class BoarderUpdateServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		  String num = request.getParameter("num");
		  
		  BoardDAO bDao = BoardDAO.getInstance();
		  bDao.updateReadCount(num);
		  BoardVO bVo = bDao.selectOneBoardByNum(num);
		  request.setAttribute("board", bVo);
		  
		  // 쿼리스트링으로 전달된 상품 코드 받기
		  RequestDispatcher dispatcher = request.getRequestDispatcher("/Views/boarderUpdate.jsp");
		  dispatcher.forward(request, response);
		
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		// 한글 출력
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		request.setCharacterEncoding("UTF-8");
		
		// file 받아오기
		ServletContext context = getServletContext();
		String path = context.getRealPath("upload");
		String encType = "UTF-8";
		int sizeLimit = 20 * 1024 * 1024;
		
		MultipartRequest multi = new MultipartRequest(request, path, sizeLimit, encType, new DefaultFileRenamePolicy());

		// 세션에서 pwd 가져오기
		HttpSession session = request.getSession();
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		String pwd = loginUser.getPwd();
		String userid = loginUser.getUserid();
		// print 사용
		PrintWriter out = response.getWriter();
		
		// form에서 값 받아오기
		String pictureUrl =  multi.getFilesystemName("pictureUrl");
		String writeTitle = multi.getParameter("writeTitle");
		String content = multi.getParameter("content");
		String pwdCheck = multi.getParameter("pwdCheck");
		int num = multi.getParameter("")
		
		// MemberDAO 객체를 통해 DB 접근
		// 비밀번호 일치 여부 확인
		MemberDAO mDao = MemberDAO.getInstance();
		int result = mDao.userCheck(userid, pwdCheck);
		
		// 디버깅용
		System.out.println("pictureUrl : " + pictureUrl);
		System.out.println("pwdCheck : " + pwd);
		System.out.println("writeTitle : " + writeTitle);
		System.out.println("content : " + content);
		System.out.println("userid : " + userid);
		System.out.println("result : " + result);
		
		if (result == 1) { // 로그인 성공
			// 로그인 성공 메시지 전달 (필요 시 화면에 출력)
			request.setAttribute("message", "비밀번호가 확인되었습니다.");
			
			BoardVO pVo = new BoardVO();
			pVo.setTitle(writeTitle);
			pVo.setContent (content);
			pVo.setPictureUrl(pictureUrl);
			pVo.setPass(pwd);
			pVo.setUserid(userid);
				
			BoardDAO pDao = BoardDAO.getInstance();
			pDao.updateBoard(pVo);
					
			response.sendRedirect("boarderlist.do");
			
		} else if (result == 0) { // 비밀번호 틀림
			request.setAttribute("message", "비밀번호가 맞지 않습니다.");

			// script로 alert 경고 출력
			out.println("<script>");
			out.println("alert('비밀번호가 올바르지 않습니다.');");
			out.println("history.back();");
			out.println("</script>");
			out.close();
			
			RequestDispatcher dispatcher = request.getRequestDispatcher("boarderupdate.do");
			dispatcher.forward(request, response);
		}
	}

}
